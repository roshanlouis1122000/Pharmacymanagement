import { __awaiter, __decorate, __metadata, __param } from "tslib";
import { Injectable, EventEmitter, LOCALE_ID, Inject, Optional } from '@angular/core';
import * as i0 from "@angular/core";
let GoogleChartsLoaderService = class GoogleChartsLoaderService {
    constructor(localeId, googleChartsSettings) {
        this.googleChartsSettings = googleChartsSettings;
        this.loadedPackages = [];
        this.loaded = false;
        const defaultSettings = {
            googleChartsVersion: '47',
            language: localeId,
        };
        this.googleChartsSettings = Object.assign(Object.assign({}, defaultSettings), this.googleChartsSettings);
        this.googleScriptLoadingNotifier = new EventEmitter();
        this.googleChartLoadingNotifier = new EventEmitter();
        this.googleScriptIsLoading = false;
        this.googleChartIsLoading = false;
        this.loadGoogleChartsScriptPromise = new Promise((resolve, reject) => {
            if (typeof google !== 'undefined' && google.charts) {
                resolve();
            }
            else if (!this.googleScriptIsLoading) {
                this.googleScriptIsLoading = true;
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://www.gstatic.com/charts/loader.js';
                script.async = true;
                script.defer = true;
                script.onload = () => {
                    this.googleScriptIsLoading = false;
                    this.googleScriptLoadingNotifier.emit(true);
                    resolve();
                };
                script.onerror = () => {
                    this.googleScriptIsLoading = false;
                    this.googleScriptLoadingNotifier.emit(false);
                    reject();
                };
                document.getElementsByTagName('head')[0].appendChild(script);
            }
            else {
                this.googleScriptLoadingNotifier.subscribe((loaded) => {
                    if (loaded) {
                        resolve();
                    }
                    else {
                        reject();
                    }
                });
            }
        });
    }
    load(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadGoogleChartsScriptPromise;
            yield new Promise((resolve) => {
                if (this.googleChartIsLoading) {
                    this.googleChartLoadingNotifier.subscribe(() => {
                        this.doLoad(resolve, settings);
                    });
                    return;
                }
                this.doLoad(resolve, settings);
            });
        });
    }
    doLoad(resolve, settings) {
        settings = Object.assign(Object.assign({}, this.googleChartsSettings), settings);
        if (!settings.packages && this.loaded) {
            resolve();
            return;
        }
        if (settings.packages) {
            let pkgs = settings.packages.filter(p => this.loadedPackages.indexOf(p) < 0);
            if (pkgs.length == 0 && this.loaded) {
                resolve();
                return;
            }
            settings.packages = pkgs;
        }
        const _settings = settings;
        _settings.callback = () => {
            this.googleChartIsLoading = false;
            this.loadedPackages = this.loadedPackages.concat(_settings.packages);
            this.loaded = true;
            this.googleChartLoadingNotifier.emit();
            resolve();
        };
        this.googleChartIsLoading = true;
        google.charts.load(settings.googleChartsVersion, _settings);
    }
};
GoogleChartsLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleChartsLoaderService_Factory() { return new GoogleChartsLoaderService(i0.ɵɵinject(i0.LOCALE_ID), i0.ɵɵinject("googleChartsSettings", 8)); }, token: GoogleChartsLoaderService, providedIn: "root" });
GoogleChartsLoaderService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Inject(LOCALE_ID)),
    __param(1, Inject('googleChartsSettings')), __param(1, Optional()),
    __metadata("design:paramtypes", [String, Object])
], GoogleChartsLoaderService);
export { GoogleChartsLoaderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1nb29nbGUtY2hhcnRzL3NyYy9saWIvZ29vZ2xlLWNoYXJ0cy1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBVXRGLElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBVXBDLFlBQ3FCLFFBQWdCLEVBQ2lCLG9CQUEwQztRQUExQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBTHhGLG1CQUFjLEdBQWEsRUFBRSxDQUFDO1FBQzlCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFNckIsTUFBTSxlQUFlLEdBQXlCO1lBQzVDLG1CQUFtQixFQUFFLElBQUk7WUFDekIsUUFBUSxFQUFFLFFBQVE7U0FDbkIsQ0FBQztRQUNGLElBQUksQ0FBQyxvQkFBb0IsbUNBQU8sZUFBZSxHQUFLLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBRS9FLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3RELElBQUksQ0FBQywwQkFBMEIsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3JELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxLQUFLLENBQUM7UUFDbkMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQztRQUVsQyxJQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbkUsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDbEQsT0FBTyxFQUFFLENBQUM7YUFDWDtpQkFBTSxJQUFJ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R0FBRyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7WUFDbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbkIsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3ZDLE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztRQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUQsQ0FBQztDQUNGLENBQUE7O0FBOUdZLHlCQUF5QjtJQUhyQyxVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0lBWUcsV0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDakIsV0FBQSxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQSxFQUFFLFdBQUEsUUFBUSxFQUFFLENBQUE7O0dBWmxDLHlCQUF5QixDQThHckM7U0E5R1kseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiZGVjbGFyZSB2YXIgZ29vZ2xlOiBhbnk7XG5cbmltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciwgTE9DQUxFX0lELCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHb29nbGVDaGFydHNTZXR0aW5ncyB9IGZyb20gJy4vZ29vZ2xlLWNoYXJ0cy1pbnRlcmZhY2VzJztcblxuaW50ZXJmYWNlIEludGVybmFsR29vZ2xlQ2hhcnRzU2V0dGluZ3MgZXh0ZW5kcyBHb29nbGVDaGFydHNTZXR0aW5ncyB7XG4gIGNhbGxiYWNrPygpOiBhbnk7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2Uge1xuXG4gIHByaXZhdGUgZ29vZ2xlU2NyaXB0TG9hZGluZ05vdGlmaWVyOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gIHByaXZhdGUgZ29vZ2xlQ2hhcnRMb2FkaW5nTm90aWZpZXI6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgcHJpdmF0ZSBnb29nbGVTY3JpcHRJc0xvYWRpbmc6IGJvb2xlYW47XG4gIHByaXZhdGUgZ29vZ2xlQ2hhcnRJc0xvYWRpbmc6IGJvb2xlYW47XG4gIHByaXZhdGUgbG9hZEdvb2dsZUNoYXJ0c1NjcmlwdFByb21pc2U6IFByb21pc2U8dm9pZD47XG4gIHByaXZhdGUgbG9hZGVkUGFja2FnZXM6IHN0cmluZ1tdID0gW107XG4gIHByaXZhdGUgbG9hZGVkID0gZmFsc2U7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBsb2NhbGVJZDogc3RyaW5nLFxuICAgIEBJbmplY3QoJ2dvb2dsZUNoYXJ0c1NldHRpbmdzJykgQE9wdGlvbmFsKCkgcHJpdmF0ZSBnb29nbGVDaGFydHNTZXR0aW5nczogR29vZ2xlQ2hhcnRzU2V0dGluZ3MsXG4gICkge1xuICAgIGNvbnN0IGRlZmF1bHRTZXR0aW5nczogR29vZ2xlQ2hhcnRzU2V0dGluZ3MgPSB7XG4gICAgICBnb29nbGVDaGFydHNWZXJzaW9uOiAnNDcnLFxuICAgICAgbGFuZ3VhZ2U6IGxvY2FsZUlkLFxuICAgIH07XG4gICAgdGhpcy5nb29nbGVDaGFydHNTZXR0aW5ncyA9IHsuLi5kZWZhdWx0U2V0dGluZ3MsIC4uLnRoaXMuZ29vZ2xlQ2hhcnRzU2V0dGluZ3N9O1xuXG4gICAgdGhpcy5nb29nbGVTY3JpcHRMb2FkaW5nTm90aWZpZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgdGhpcy5nb29nbGVDaGFydExvYWRpbmdOb3RpZmllciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuZ29vZ2xlQ2hhcnRJc0xvYWRpbmcgPSBmYWxzZTtcblxuICAgIHRoaXMubG9hZEdvb2dsZUNoYXJ0c1NjcmlwdFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGdvb2dsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ29vZ2xlLmNoYXJ0cykge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZykge1xuXG4gICAgICAgIHRoaXMuZ29vZ2xlU2NyaXB0SXNMb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL3d3dy5nc3RhdGljLmNvbS9jaGFydHMvbG9hZGVyLmpzJztcbiAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgc2NyaXB0LmRlZmVyID0gdHJ1ZTtcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZ29vZ2xlU2NyaXB0TG9hZGluZ05vdGlmaWVyLmVtaXQodHJ1ZSk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBzY3JpcHQub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZ29vZ2xlU2NyaXB0TG9hZGluZ05vdGlmaWVyLmVtaXQoZmFsc2UpO1xuICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ29vZ2xlU2NyaXB0TG9hZGluZ05vdGlmaWVyLnN1YnNjcmliZSgobG9hZGVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgaWYgKGxvYWRlZCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxvYWQoc2V0dGluZ3M/OiBHb29nbGVDaGFydHNTZXR0aW5ncyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMubG9hZEdvb2dsZUNoYXJ0c1NjcmlwdFByb21pc2U7XG5cbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXG4gICAgICBpZiAodGhpcy5nb29nbGVDaGFydElzTG9hZGluZykge1xuICAgICAgICB0aGlzLmdvb2dsZUNoYXJ0TG9hZGluZ05vdGlmaWVyLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kb0xvYWQocmVzb2x2ZSwgc2V0dGluZ3MpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZG9Mb2FkKHJlc29sdmUsIHNldHRpbmdzKTtcblxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkb0xvYWQocmVzb2x2ZTogKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZCwgc2V0dGluZ3M/OiBHb29nbGVDaGFydHNTZXR0aW5ncykge1xuICAgIHNldHRpbmdzID0gey4uLnRoaXMuZ29vZ2xlQ2hhcnRzU2V0dGluZ3MsIC4uLnNldHRpbmdzfVxuXG4gICAgaWYgKCFzZXR0aW5ncy5wYWNrYWdlcyAmJiB0aGlzLmxvYWRlZCkge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXR0aW5ncy5wYWNrYWdlcykge1xuICAgICAgbGV0IHBrZ3MgPSBzZXR0aW5ncy5wYWNrYWdlcy5maWx0ZXIocCA9PiB0aGlzLmxvYWRlZFBhY2thZ2VzLmluZGV4T2YocCkgPCAwKTtcblxuICAgICAgaWYgKHBrZ3MubGVuZ3RoID09IDAgJiYgdGhpcy5sb2FkZWQpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldHRpbmdzLnBhY2thZ2VzID0gcGtncztcbiAgICB9XG5cbiAgICBjb25zdCBfc2V0dGluZ3M6IEludGVybmFsR29vZ2xlQ2hhcnRzU2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICBfc2V0dGluZ3MuY2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLmdvb2dsZUNoYXJ0SXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmxvYWRlZFBhY2thZ2VzID0gdGhpcy5sb2FkZWRQYWNrYWdlcy5jb25jYXQoX3NldHRpbmdzLnBhY2thZ2VzKTtcbiAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZ29vZ2xlQ2hhcnRMb2FkaW5nTm90aWZpZXIuZW1pdCgpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH07XG5cbiAgICB0aGlzLmdvb2dsZUNoYXJ0SXNMb2FkaW5nID0gdHJ1ZTtcbiAgICBnb29nbGUuY2hhcnRzLmxvYWQoc2V0dGluZ3MuZ29vZ2xlQ2hhcnRzVmVyc2lvbiwgX3NldHRpbmdzKTtcbiAgfVxufVxuIl19